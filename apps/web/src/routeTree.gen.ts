/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoredRouteImport } from './routes/stored'
import { Route as PullRequestsRouteImport } from './routes/pull-requests'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AnalysisRouteImport } from './routes/analysis'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const StoredRoute = StoredRouteImport.update({
  id: '/stored',
  path: '/stored',
  getParentRoute: () => rootRouteImport,
} as any)
const PullRequestsRoute = PullRequestsRouteImport.update({
  id: '/pull-requests',
  path: '/pull-requests',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalysisRoute = AnalysisRouteImport.update({
  id: '/analysis',
  path: '/analysis',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/pull-requests': typeof PullRequestsRoute
  '/stored': typeof StoredRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/pull-requests': typeof PullRequestsRoute
  '/stored': typeof StoredRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/analysis': typeof AnalysisRoute
  '/dashboard': typeof DashboardRoute
  '/pull-requests': typeof PullRequestsRoute
  '/stored': typeof StoredRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/analysis'
    | '/dashboard'
    | '/pull-requests'
    | '/stored'
    | '/auth/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/analysis'
    | '/dashboard'
    | '/pull-requests'
    | '/stored'
    | '/auth/callback'
  id:
    | '__root__'
    | '/'
    | '/analysis'
    | '/dashboard'
    | '/pull-requests'
    | '/stored'
    | '/auth/callback'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnalysisRoute: typeof AnalysisRoute
  DashboardRoute: typeof DashboardRoute
  PullRequestsRoute: typeof PullRequestsRoute
  StoredRoute: typeof StoredRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stored': {
      id: '/stored'
      path: '/stored'
      fullPath: '/stored'
      preLoaderRoute: typeof StoredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pull-requests': {
      id: '/pull-requests'
      path: '/pull-requests'
      fullPath: '/pull-requests'
      preLoaderRoute: typeof PullRequestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analysis': {
      id: '/analysis'
      path: '/analysis'
      fullPath: '/analysis'
      preLoaderRoute: typeof AnalysisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnalysisRoute: AnalysisRoute,
  DashboardRoute: DashboardRoute,
  PullRequestsRoute: PullRequestsRoute,
  StoredRoute: StoredRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
